// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class S_ANIMATION;
struct S_ANIMATIONDefaultTypeInternal;
extern S_ANIMATIONDefaultTypeInternal _S_ANIMATION_default_instance_;
class S_CHARACTER_NAME;
struct S_CHARACTER_NAMEDefaultTypeInternal;
extern S_CHARACTER_NAMEDefaultTypeInternal _S_CHARACTER_NAME_default_instance_;
class S_CREATE_OBJCECT;
struct S_CREATE_OBJCECTDefaultTypeInternal;
extern S_CREATE_OBJCECTDefaultTypeInternal _S_CREATE_OBJCECT_default_instance_;
class S_LEVEL_STATE;
struct S_LEVEL_STATEDefaultTypeInternal;
extern S_LEVEL_STATEDefaultTypeInternal _S_LEVEL_STATE_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MATRIX;
struct S_MATRIXDefaultTypeInternal;
extern S_MATRIXDefaultTypeInternal _S_MATRIX_default_instance_;
class S_OPEN_LEVEL;
struct S_OPEN_LEVELDefaultTypeInternal;
extern S_OPEN_LEVELDefaultTypeInternal _S_OPEN_LEVEL_default_instance_;
class S_TIME;
struct S_TIMEDefaultTypeInternal;
extern S_TIMEDefaultTypeInternal _S_TIME_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::S_ANIMATION* Arena::CreateMaybeMessage<::Protocol::S_ANIMATION>(Arena*);
template<> ::Protocol::S_CHARACTER_NAME* Arena::CreateMaybeMessage<::Protocol::S_CHARACTER_NAME>(Arena*);
template<> ::Protocol::S_CREATE_OBJCECT* Arena::CreateMaybeMessage<::Protocol::S_CREATE_OBJCECT>(Arena*);
template<> ::Protocol::S_LEVEL_STATE* Arena::CreateMaybeMessage<::Protocol::S_LEVEL_STATE>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MATRIX* Arena::CreateMaybeMessage<::Protocol::S_MATRIX>(Arena*);
template<> ::Protocol::S_OPEN_LEVEL* Arena::CreateMaybeMessage<::Protocol::S_OPEN_LEVEL>(Arena*);
template<> ::Protocol::S_TIME* Arena::CreateMaybeMessage<::Protocol::S_TIME>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_TIME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_TIME) */ {
 public:
  inline S_TIME() : S_TIME(nullptr) {}
  ~S_TIME() override;
  explicit constexpr S_TIME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TIME(const S_TIME& from);
  S_TIME(S_TIME&& from) noexcept
    : S_TIME() {
    *this = ::std::move(from);
  }

  inline S_TIME& operator=(const S_TIME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TIME& operator=(S_TIME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TIME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TIME* internal_default_instance() {
    return reinterpret_cast<const S_TIME*>(
               &_S_TIME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_TIME& a, S_TIME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TIME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TIME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_TIME* New() const final {
    return new S_TIME();
  }

  S_TIME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_TIME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_TIME& from);
  void MergeFrom(const S_TIME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TIME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_TIME";
  }
  protected:
  explicit S_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kISendTickFieldNumber = 1,
    kIServerMinuteFieldNumber = 2,
    kFServerSecondFieldNumber = 3,
  };
  // uint64 iSendTick = 1;
  void clear_isendtick();
  ::PROTOBUF_NAMESPACE_ID::uint64 isendtick() const;
  void set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_isendtick() const;
  void _internal_set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 iServerMinute = 2;
  void clear_iserverminute();
  ::PROTOBUF_NAMESPACE_ID::uint32 iserverminute() const;
  void set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iserverminute() const;
  void _internal_set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float fServerSecond = 3;
  void clear_fserversecond();
  float fserversecond() const;
  void set_fserversecond(float value);
  private:
  float _internal_fserversecond() const;
  void _internal_set_fserversecond(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_TIME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 isendtick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iserverminute_;
  float fserversecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OPEN_LEVEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OPEN_LEVEL) */ {
 public:
  inline S_OPEN_LEVEL() : S_OPEN_LEVEL(nullptr) {}
  ~S_OPEN_LEVEL() override;
  explicit constexpr S_OPEN_LEVEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OPEN_LEVEL(const S_OPEN_LEVEL& from);
  S_OPEN_LEVEL(S_OPEN_LEVEL&& from) noexcept
    : S_OPEN_LEVEL() {
    *this = ::std::move(from);
  }

  inline S_OPEN_LEVEL& operator=(const S_OPEN_LEVEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OPEN_LEVEL& operator=(S_OPEN_LEVEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OPEN_LEVEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OPEN_LEVEL* internal_default_instance() {
    return reinterpret_cast<const S_OPEN_LEVEL*>(
               &_S_OPEN_LEVEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_OPEN_LEVEL& a, S_OPEN_LEVEL& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OPEN_LEVEL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OPEN_LEVEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OPEN_LEVEL* New() const final {
    return new S_OPEN_LEVEL();
  }

  S_OPEN_LEVEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OPEN_LEVEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OPEN_LEVEL& from);
  void MergeFrom(const S_OPEN_LEVEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OPEN_LEVEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OPEN_LEVEL";
  }
  protected:
  explicit S_OPEN_LEVEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kILevelIDFieldNumber = 1,
  };
  // uint64 iLevelID = 1;
  void clear_ilevelid();
  ::PROTOBUF_NAMESPACE_ID::uint64 ilevelid() const;
  void set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ilevelid() const;
  void _internal_set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OPEN_LEVEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ilevelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEVEL_STATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LEVEL_STATE) */ {
 public:
  inline S_LEVEL_STATE() : S_LEVEL_STATE(nullptr) {}
  ~S_LEVEL_STATE() override;
  explicit constexpr S_LEVEL_STATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEVEL_STATE(const S_LEVEL_STATE& from);
  S_LEVEL_STATE(S_LEVEL_STATE&& from) noexcept
    : S_LEVEL_STATE() {
    *this = ::std::move(from);
  }

  inline S_LEVEL_STATE& operator=(const S_LEVEL_STATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEVEL_STATE& operator=(S_LEVEL_STATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEVEL_STATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEVEL_STATE* internal_default_instance() {
    return reinterpret_cast<const S_LEVEL_STATE*>(
               &_S_LEVEL_STATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LEVEL_STATE& a, S_LEVEL_STATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEVEL_STATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEVEL_STATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LEVEL_STATE* New() const final {
    return new S_LEVEL_STATE();
  }

  S_LEVEL_STATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LEVEL_STATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LEVEL_STATE& from);
  void MergeFrom(const S_LEVEL_STATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LEVEL_STATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEVEL_STATE";
  }
  protected:
  explicit S_LEVEL_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kILevelStateFieldNumber = 1,
  };
  // uint32 iLevelState = 1;
  void clear_ilevelstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevelstate() const;
  void set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilevelstate() const;
  void _internal_set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LEVEL_STATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevelstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_OBJCECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_OBJCECT) */ {
 public:
  inline S_CREATE_OBJCECT() : S_CREATE_OBJCECT(nullptr) {}
  ~S_CREATE_OBJCECT() override;
  explicit constexpr S_CREATE_OBJCECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_OBJCECT(const S_CREATE_OBJCECT& from);
  S_CREATE_OBJCECT(S_CREATE_OBJCECT&& from) noexcept
    : S_CREATE_OBJCECT() {
    *this = ::std::move(from);
  }

  inline S_CREATE_OBJCECT& operator=(const S_CREATE_OBJCECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_OBJCECT& operator=(S_CREATE_OBJCECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_OBJCECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_OBJCECT* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_OBJCECT*>(
               &_S_CREATE_OBJCECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_CREATE_OBJCECT& a, S_CREATE_OBJCECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_OBJCECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_OBJCECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE_OBJCECT* New() const final {
    return new S_CREATE_OBJCECT();
  }

  S_CREATE_OBJCECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE_OBJCECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE_OBJCECT& from);
  void MergeFrom(const S_CREATE_OBJCECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_OBJCECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_OBJCECT";
  }
  protected:
  explicit S_CREATE_OBJCECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNameFieldNumber = 5,
    kIObjectIDFieldNumber = 1,
    kIObjectTypeFieldNumber = 2,
    kILevelFieldNumber = 3,
    kILayerFieldNumber = 4,
    kBControllFieldNumber = 6,
  };
  // string strName = 5;
  void clear_strname();
  const std::string& strname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strname();
  void set_allocated_strname(std::string* strname);
  private:
  const std::string& _internal_strname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strname(const std::string& value);
  std::string* _internal_mutable_strname();
  public:

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 iObjectType = 2;
  void clear_iobjecttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjecttype() const;
  void set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iobjecttype() const;
  void _internal_set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iLevel = 3;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iLayer = 4;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool bControll = 6;
  void clear_bcontroll();
  bool bcontroll() const;
  void set_bcontroll(bool value);
  private:
  bool _internal_bcontroll() const;
  void _internal_set_bcontroll(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_OBJCECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strname_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjecttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilayer_;
  bool bcontroll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHARACTER_NAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHARACTER_NAME) */ {
 public:
  inline S_CHARACTER_NAME() : S_CHARACTER_NAME(nullptr) {}
  ~S_CHARACTER_NAME() override;
  explicit constexpr S_CHARACTER_NAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHARACTER_NAME(const S_CHARACTER_NAME& from);
  S_CHARACTER_NAME(S_CHARACTER_NAME&& from) noexcept
    : S_CHARACTER_NAME() {
    *this = ::std::move(from);
  }

  inline S_CHARACTER_NAME& operator=(const S_CHARACTER_NAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHARACTER_NAME& operator=(S_CHARACTER_NAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHARACTER_NAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHARACTER_NAME* internal_default_instance() {
    return reinterpret_cast<const S_CHARACTER_NAME*>(
               &_S_CHARACTER_NAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHARACTER_NAME& a, S_CHARACTER_NAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHARACTER_NAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHARACTER_NAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHARACTER_NAME* New() const final {
    return new S_CHARACTER_NAME();
  }

  S_CHARACTER_NAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHARACTER_NAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHARACTER_NAME& from);
  void MergeFrom(const S_CHARACTER_NAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHARACTER_NAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHARACTER_NAME";
  }
  protected:
  explicit S_CHARACTER_NAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNameFieldNumber = 1,
  };
  // string strName = 1;
  void clear_strname();
  const std::string& strname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strname();
  void set_allocated_strname(std::string* strname);
  private:
  const std::string& _internal_strname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strname(const std::string& value);
  std::string* _internal_mutable_strname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHARACTER_NAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MATRIX final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MATRIX) */ {
 public:
  inline S_MATRIX() : S_MATRIX(nullptr) {}
  ~S_MATRIX() override;
  explicit constexpr S_MATRIX(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATRIX(const S_MATRIX& from);
  S_MATRIX(S_MATRIX&& from) noexcept
    : S_MATRIX() {
    *this = ::std::move(from);
  }

  inline S_MATRIX& operator=(const S_MATRIX& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATRIX& operator=(S_MATRIX&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATRIX& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATRIX* internal_default_instance() {
    return reinterpret_cast<const S_MATRIX*>(
               &_S_MATRIX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_MATRIX& a, S_MATRIX& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATRIX* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATRIX* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MATRIX* New() const final {
    return new S_MATRIX();
  }

  S_MATRIX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MATRIX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MATRIX& from);
  void MergeFrom(const S_MATRIX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATRIX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MATRIX";
  }
  protected:
  explicit S_MATRIX(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 4,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
  };
  // repeated float Matrix = 4 [packed = true];
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  private:
  float _internal_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_matrix() const;
  void _internal_add_matrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_matrix();
  public:
  float matrix(int index) const;
  void set_matrix(int index, float value);
  void add_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_matrix();

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MATRIX)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > matrix_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANIMATION) */ {
 public:
  inline S_ANIMATION() : S_ANIMATION(nullptr) {}
  ~S_ANIMATION() override;
  explicit constexpr S_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANIMATION(const S_ANIMATION& from);
  S_ANIMATION(S_ANIMATION&& from) noexcept
    : S_ANIMATION() {
    *this = ::std::move(from);
  }

  inline S_ANIMATION& operator=(const S_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANIMATION& operator=(S_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const S_ANIMATION*>(
               &_S_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_ANIMATION& a, S_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANIMATION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ANIMATION* New() const final {
    return new S_ANIMATION();
  }

  S_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ANIMATION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ANIMATION& from);
  void MergeFrom(const S_ANIMATION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANIMATION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANIMATION";
  }
  protected:
  explicit S_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kIAnimIndexFieldNumber = 4,
    kFChangeTimeFieldNumber = 5,
    kIStartFrameFieldNumber = 6,
    kIChangeFrameFieldNumber = 7,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iAnimIndex = 4;
  void clear_ianimindex();
  ::PROTOBUF_NAMESPACE_ID::int32 ianimindex() const;
  void set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ianimindex() const;
  void _internal_set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float fChangeTime = 5;
  void clear_fchangetime();
  float fchangetime() const;
  void set_fchangetime(float value);
  private:
  float _internal_fchangetime() const;
  void _internal_set_fchangetime(float value);
  public:

  // int32 iStartFrame = 6;
  void clear_istartframe();
  ::PROTOBUF_NAMESPACE_ID::int32 istartframe() const;
  void set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istartframe() const;
  void _internal_set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iChangeFrame = 7;
  void clear_ichangeframe();
  ::PROTOBUF_NAMESPACE_ID::int32 ichangeframe() const;
  void set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ichangeframe() const;
  void _internal_set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 ianimindex_;
  float fchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 istartframe_;
  ::PROTOBUF_NAMESPACE_ID::int32 ichangeframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_TIME

// uint64 iSendTick = 1;
inline void S_TIME::clear_isendtick() {
  isendtick_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_TIME::_internal_isendtick() const {
  return isendtick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_TIME::isendtick() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TIME.iSendTick)
  return _internal_isendtick();
}
inline void S_TIME::_internal_set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  isendtick_ = value;
}
inline void S_TIME::set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_isendtick(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TIME.iSendTick)
}

// uint32 iServerMinute = 2;
inline void S_TIME::clear_iserverminute() {
  iserverminute_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_TIME::_internal_iserverminute() const {
  return iserverminute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_TIME::iserverminute() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TIME.iServerMinute)
  return _internal_iserverminute();
}
inline void S_TIME::_internal_set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iserverminute_ = value;
}
inline void S_TIME::set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iserverminute(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TIME.iServerMinute)
}

// float fServerSecond = 3;
inline void S_TIME::clear_fserversecond() {
  fserversecond_ = 0;
}
inline float S_TIME::_internal_fserversecond() const {
  return fserversecond_;
}
inline float S_TIME::fserversecond() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TIME.fServerSecond)
  return _internal_fserversecond();
}
inline void S_TIME::_internal_set_fserversecond(float value) {
  
  fserversecond_ = value;
}
inline void S_TIME::set_fserversecond(float value) {
  _internal_set_fserversecond(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TIME.fServerSecond)
}

// -------------------------------------------------------------------

// S_LOGIN

// -------------------------------------------------------------------

// S_OPEN_LEVEL

// uint64 iLevelID = 1;
inline void S_OPEN_LEVEL::clear_ilevelid() {
  ilevelid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OPEN_LEVEL::_internal_ilevelid() const {
  return ilevelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OPEN_LEVEL::ilevelid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OPEN_LEVEL.iLevelID)
  return _internal_ilevelid();
}
inline void S_OPEN_LEVEL::_internal_set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ilevelid_ = value;
}
inline void S_OPEN_LEVEL::set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ilevelid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OPEN_LEVEL.iLevelID)
}

// -------------------------------------------------------------------

// S_LEVEL_STATE

// uint32 iLevelState = 1;
inline void S_LEVEL_STATE::clear_ilevelstate() {
  ilevelstate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LEVEL_STATE::_internal_ilevelstate() const {
  return ilevelstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LEVEL_STATE::ilevelstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEVEL_STATE.iLevelState)
  return _internal_ilevelstate();
}
inline void S_LEVEL_STATE::_internal_set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilevelstate_ = value;
}
inline void S_LEVEL_STATE::set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilevelstate(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LEVEL_STATE.iLevelState)
}

// -------------------------------------------------------------------

// S_CREATE_OBJCECT

// int32 iObjectID = 1;
inline void S_CREATE_OBJCECT::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_OBJCECT::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_OBJCECT::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iObjectID)
  return _internal_iobjectid();
}
inline void S_CREATE_OBJCECT::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_CREATE_OBJCECT::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iObjectID)
}

// uint32 iObjectType = 2;
inline void S_CREATE_OBJCECT::clear_iobjecttype() {
  iobjecttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::_internal_iobjecttype() const {
  return iobjecttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::iobjecttype() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iObjectType)
  return _internal_iobjecttype();
}
inline void S_CREATE_OBJCECT::_internal_set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iobjecttype_ = value;
}
inline void S_CREATE_OBJCECT::set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iobjecttype(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iObjectType)
}

// uint32 iLevel = 3;
inline void S_CREATE_OBJCECT::clear_ilevel() {
  ilevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iLevel)
  return _internal_ilevel();
}
inline void S_CREATE_OBJCECT::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilevel_ = value;
}
inline void S_CREATE_OBJCECT::set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iLevel)
}

// uint32 iLayer = 4;
inline void S_CREATE_OBJCECT::clear_ilayer() {
  ilayer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iLayer)
  return _internal_ilayer();
}
inline void S_CREATE_OBJCECT::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilayer_ = value;
}
inline void S_CREATE_OBJCECT::set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iLayer)
}

// string strName = 5;
inline void S_CREATE_OBJCECT::clear_strname() {
  strname_.ClearToEmpty();
}
inline const std::string& S_CREATE_OBJCECT::strname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.strName)
  return _internal_strname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE_OBJCECT::set_strname(ArgT0&& arg0, ArgT... args) {
 
 strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.strName)
}
inline std::string* S_CREATE_OBJCECT::mutable_strname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_OBJCECT.strName)
  return _internal_mutable_strname();
}
inline const std::string& S_CREATE_OBJCECT::_internal_strname() const {
  return strname_.Get();
}
inline void S_CREATE_OBJCECT::_internal_set_strname(const std::string& value) {
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CREATE_OBJCECT::_internal_mutable_strname() {
  
  return strname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CREATE_OBJCECT::release_strname() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_OBJCECT.strName)
  return strname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CREATE_OBJCECT::set_allocated_strname(std::string* strname) {
  if (strname != nullptr) {
    
  } else {
    
  }
  strname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_OBJCECT.strName)
}

// bool bControll = 6;
inline void S_CREATE_OBJCECT::clear_bcontroll() {
  bcontroll_ = false;
}
inline bool S_CREATE_OBJCECT::_internal_bcontroll() const {
  return bcontroll_;
}
inline bool S_CREATE_OBJCECT::bcontroll() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.bControll)
  return _internal_bcontroll();
}
inline void S_CREATE_OBJCECT::_internal_set_bcontroll(bool value) {
  
  bcontroll_ = value;
}
inline void S_CREATE_OBJCECT::set_bcontroll(bool value) {
  _internal_set_bcontroll(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.bControll)
}

// -------------------------------------------------------------------

// S_CHARACTER_NAME

// string strName = 1;
inline void S_CHARACTER_NAME::clear_strname() {
  strname_.ClearToEmpty();
}
inline const std::string& S_CHARACTER_NAME::strname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHARACTER_NAME.strName)
  return _internal_strname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHARACTER_NAME::set_strname(ArgT0&& arg0, ArgT... args) {
 
 strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHARACTER_NAME.strName)
}
inline std::string* S_CHARACTER_NAME::mutable_strname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHARACTER_NAME.strName)
  return _internal_mutable_strname();
}
inline const std::string& S_CHARACTER_NAME::_internal_strname() const {
  return strname_.Get();
}
inline void S_CHARACTER_NAME::_internal_set_strname(const std::string& value) {
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHARACTER_NAME::_internal_mutable_strname() {
  
  return strname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHARACTER_NAME::release_strname() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHARACTER_NAME.strName)
  return strname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHARACTER_NAME::set_allocated_strname(std::string* strname) {
  if (strname != nullptr) {
    
  } else {
    
  }
  strname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHARACTER_NAME.strName)
}

// -------------------------------------------------------------------

// S_MATRIX

// int32 iObjectID = 1;
inline void S_MATRIX::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.iObjectID)
  return _internal_iobjectid();
}
inline void S_MATRIX::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_MATRIX::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.iObjectID)
}

// int32 iLevel = 2;
inline void S_MATRIX::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.iLevel)
  return _internal_ilevel();
}
inline void S_MATRIX::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_MATRIX::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.iLevel)
}

// int32 iLayer = 3;
inline void S_MATRIX::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.iLayer)
  return _internal_ilayer();
}
inline void S_MATRIX::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_MATRIX::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.iLayer)
}

// repeated float Matrix = 4 [packed = true];
inline int S_MATRIX::_internal_matrix_size() const {
  return matrix_.size();
}
inline int S_MATRIX::matrix_size() const {
  return _internal_matrix_size();
}
inline void S_MATRIX::clear_matrix() {
  matrix_.Clear();
}
inline float S_MATRIX::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline float S_MATRIX::matrix(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.Matrix)
  return _internal_matrix(index);
}
inline void S_MATRIX::set_matrix(int index, float value) {
  matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.Matrix)
}
inline void S_MATRIX::_internal_add_matrix(float value) {
  matrix_.Add(value);
}
inline void S_MATRIX::add_matrix(float value) {
  _internal_add_matrix(value);
  // @@protoc_insertion_point(field_add:Protocol.S_MATRIX.Matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_MATRIX::_internal_matrix() const {
  return matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_MATRIX::matrix() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MATRIX.Matrix)
  return _internal_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_MATRIX::_internal_mutable_matrix() {
  return &matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_MATRIX::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MATRIX.Matrix)
  return _internal_mutable_matrix();
}

// -------------------------------------------------------------------

// S_ANIMATION

// int32 iObjectID = 1;
inline void S_ANIMATION::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iObjectID)
  return _internal_iobjectid();
}
inline void S_ANIMATION::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_ANIMATION::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iObjectID)
}

// int32 iLevel = 2;
inline void S_ANIMATION::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iLevel)
  return _internal_ilevel();
}
inline void S_ANIMATION::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_ANIMATION::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iLevel)
}

// int32 iLayer = 3;
inline void S_ANIMATION::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iLayer)
  return _internal_ilayer();
}
inline void S_ANIMATION::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_ANIMATION::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iLayer)
}

// int32 iAnimIndex = 4;
inline void S_ANIMATION::clear_ianimindex() {
  ianimindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ianimindex() const {
  return ianimindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ianimindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iAnimIndex)
  return _internal_ianimindex();
}
inline void S_ANIMATION::_internal_set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ianimindex_ = value;
}
inline void S_ANIMATION::set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ianimindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iAnimIndex)
}

// float fChangeTime = 5;
inline void S_ANIMATION::clear_fchangetime() {
  fchangetime_ = 0;
}
inline float S_ANIMATION::_internal_fchangetime() const {
  return fchangetime_;
}
inline float S_ANIMATION::fchangetime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.fChangeTime)
  return _internal_fchangetime();
}
inline void S_ANIMATION::_internal_set_fchangetime(float value) {
  
  fchangetime_ = value;
}
inline void S_ANIMATION::set_fchangetime(float value) {
  _internal_set_fchangetime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.fChangeTime)
}

// int32 iStartFrame = 6;
inline void S_ANIMATION::clear_istartframe() {
  istartframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_istartframe() const {
  return istartframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::istartframe() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iStartFrame)
  return _internal_istartframe();
}
inline void S_ANIMATION::_internal_set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istartframe_ = value;
}
inline void S_ANIMATION::set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istartframe(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iStartFrame)
}

// int32 iChangeFrame = 7;
inline void S_ANIMATION::clear_ichangeframe() {
  ichangeframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ichangeframe() const {
  return ichangeframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ichangeframe() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iChangeFrame)
  return _internal_ichangeframe();
}
inline void S_ANIMATION::_internal_set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ichangeframe_ = value;
}
inline void S_ANIMATION::set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ichangeframe(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iChangeFrame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
