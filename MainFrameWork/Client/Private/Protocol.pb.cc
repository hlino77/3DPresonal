// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr S_TIME::S_TIME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isendtick_(uint64_t{0u})
  , iserverminute_(0u)
  , fserversecond_(0){}
struct S_TIMEDefaultTypeInternal {
  constexpr S_TIMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_TIMEDefaultTypeInternal() {}
  union {
    S_TIME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_TIMEDefaultTypeInternal _S_TIME_default_instance_;
constexpr S_LOGIN::S_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct S_LOGINDefaultTypeInternal {
  constexpr S_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
constexpr S_OPEN_LEVEL::S_OPEN_LEVEL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ilevelid_(uint64_t{0u}){}
struct S_OPEN_LEVELDefaultTypeInternal {
  constexpr S_OPEN_LEVELDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_OPEN_LEVELDefaultTypeInternal() {}
  union {
    S_OPEN_LEVEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_OPEN_LEVELDefaultTypeInternal _S_OPEN_LEVEL_default_instance_;
constexpr S_LEVEL_STATE::S_LEVEL_STATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ilevelstate_(0u){}
struct S_LEVEL_STATEDefaultTypeInternal {
  constexpr S_LEVEL_STATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LEVEL_STATEDefaultTypeInternal() {}
  union {
    S_LEVEL_STATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LEVEL_STATEDefaultTypeInternal _S_LEVEL_STATE_default_instance_;
constexpr S_CREATE_OBJCECT::S_CREATE_OBJCECT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iobjectid_(0)
  , iobjecttype_(0u)
  , ilevel_(0u)
  , ilayer_(0u)
  , bcontroll_(false){}
struct S_CREATE_OBJCECTDefaultTypeInternal {
  constexpr S_CREATE_OBJCECTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CREATE_OBJCECTDefaultTypeInternal() {}
  union {
    S_CREATE_OBJCECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CREATE_OBJCECTDefaultTypeInternal _S_CREATE_OBJCECT_default_instance_;
constexpr S_CHARACTER_NAME::S_CHARACTER_NAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct S_CHARACTER_NAMEDefaultTypeInternal {
  constexpr S_CHARACTER_NAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHARACTER_NAMEDefaultTypeInternal() {}
  union {
    S_CHARACTER_NAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHARACTER_NAMEDefaultTypeInternal _S_CHARACTER_NAME_default_instance_;
constexpr S_MATRIX::S_MATRIX(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_()
  , iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0){}
struct S_MATRIXDefaultTypeInternal {
  constexpr S_MATRIXDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MATRIXDefaultTypeInternal() {}
  union {
    S_MATRIX _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MATRIXDefaultTypeInternal _S_MATRIX_default_instance_;
constexpr S_ANIMATION::S_ANIMATION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , ianimindex_(0)
  , fchangetime_(0)
  , istartframe_(0)
  , ichangeframe_(0){}
struct S_ANIMATIONDefaultTypeInternal {
  constexpr S_ANIMATIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ANIMATIONDefaultTypeInternal() {}
  union {
    S_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ANIMATIONDefaultTypeInternal _S_ANIMATION_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, isendtick_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, iserverminute_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, fserversecond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OPEN_LEVEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OPEN_LEVEL, ilevelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEVEL_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEVEL_STATE, ilevelstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, iobjecttype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, strname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, bcontroll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHARACTER_NAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHARACTER_NAME, strname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ianimindex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, fchangetime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, istartframe_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ichangeframe_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::S_TIME)},
  { 8, -1, sizeof(::Protocol::S_LOGIN)},
  { 13, -1, sizeof(::Protocol::S_OPEN_LEVEL)},
  { 19, -1, sizeof(::Protocol::S_LEVEL_STATE)},
  { 25, -1, sizeof(::Protocol::S_CREATE_OBJCECT)},
  { 36, -1, sizeof(::Protocol::S_CHARACTER_NAME)},
  { 42, -1, sizeof(::Protocol::S_MATRIX)},
  { 51, -1, sizeof(::Protocol::S_ANIMATION)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_TIME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_OPEN_LEVEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LEVEL_STATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CREATE_OBJCECT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHARACTER_NAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_MATRIX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ANIMATION_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"I\n\006S_TIME\022\021\n\tiSendTick\030\001 \001("
  "\004\022\025\n\riServerMinute\030\002 \001(\r\022\025\n\rfServerSecon"
  "d\030\003 \001(\002\"\t\n\007S_LOGIN\" \n\014S_OPEN_LEVEL\022\020\n\010iL"
  "evelID\030\001 \001(\004\"$\n\rS_LEVEL_STATE\022\023\n\013iLevelS"
  "tate\030\001 \001(\r\"~\n\020S_CREATE_OBJCECT\022\021\n\tiObjec"
  "tID\030\001 \001(\005\022\023\n\013iObjectType\030\002 \001(\r\022\016\n\006iLevel"
  "\030\003 \001(\r\022\016\n\006iLayer\030\004 \001(\r\022\017\n\007strName\030\005 \001(\t\022"
  "\021\n\tbControll\030\006 \001(\010\"#\n\020S_CHARACTER_NAME\022\017"
  "\n\007strName\030\001 \001(\t\"Q\n\010S_MATRIX\022\021\n\tiObjectID"
  "\030\001 \001(\005\022\016\n\006iLevel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\022"
  "\n\006Matrix\030\004 \003(\002B\002\020\001\"\224\001\n\013S_ANIMATION\022\021\n\tiO"
  "bjectID\030\001 \001(\005\022\016\n\006iLevel\030\002 \001(\005\022\016\n\006iLayer\030"
  "\003 \001(\005\022\022\n\niAnimIndex\030\004 \001(\005\022\023\n\013fChangeTime"
  "\030\005 \001(\002\022\023\n\013iStartFrame\030\006 \001(\005\022\024\n\014iChangeFr"
  "ame\030\007 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, false, 617, descriptor_table_protodef_Protocol_2eproto, "Protocol.proto", 
  &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class S_TIME::_Internal {
 public:
};

S_TIME::S_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_TIME)
}
S_TIME::S_TIME(const S_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&isendtick_, &from.isendtick_,
    static_cast<size_t>(reinterpret_cast<char*>(&fserversecond_) -
    reinterpret_cast<char*>(&isendtick_)) + sizeof(fserversecond_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_TIME)
}

void S_TIME::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isendtick_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fserversecond_) -
    reinterpret_cast<char*>(&isendtick_)) + sizeof(fserversecond_));
}

S_TIME::~S_TIME() {
  // @@protoc_insertion_point(destructor:Protocol.S_TIME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_TIME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_TIME::ArenaDtor(void* object) {
  S_TIME* _this = reinterpret_cast< S_TIME* >(object);
  (void)_this;
}
void S_TIME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_TIME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_TIME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isendtick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fserversecond_) -
      reinterpret_cast<char*>(&isendtick_)) + sizeof(fserversecond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_TIME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iSendTick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isendtick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iServerMinute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iserverminute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fServerSecond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fserversecond_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_TIME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iSendTick = 1;
  if (this->isendtick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_isendtick(), target);
  }

  // uint32 iServerMinute = 2;
  if (this->iserverminute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iserverminute(), target);
  }

  // float fServerSecond = 3;
  if (!(this->fserversecond() <= 0 && this->fserversecond() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fserversecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_TIME)
  return target;
}

size_t S_TIME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_TIME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iSendTick = 1;
  if (this->isendtick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_isendtick());
  }

  // uint32 iServerMinute = 2;
  if (this->iserverminute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iserverminute());
  }

  // float fServerSecond = 3;
  if (!(this->fserversecond() <= 0 && this->fserversecond() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_TIME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_TIME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_TIME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_TIME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_TIME)
    MergeFrom(*source);
  }
}

void S_TIME::MergeFrom(const S_TIME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isendtick() != 0) {
    _internal_set_isendtick(from._internal_isendtick());
  }
  if (from.iserverminute() != 0) {
    _internal_set_iserverminute(from._internal_iserverminute());
  }
  if (!(from.fserversecond() <= 0 && from.fserversecond() >= 0)) {
    _internal_set_fserversecond(from._internal_fserversecond());
  }
}

void S_TIME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_TIME::CopyFrom(const S_TIME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_TIME::IsInitialized() const {
  return true;
}

void S_TIME::InternalSwap(S_TIME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_TIME, fserversecond_)
      + sizeof(S_TIME::fserversecond_)
      - PROTOBUF_FIELD_OFFSET(S_TIME, isendtick_)>(
          reinterpret_cast<char*>(&isendtick_),
          reinterpret_cast<char*>(&other->isendtick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_TIME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

void S_LOGIN::SharedCtor() {
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LOGIN::ArenaDtor(void* object) {
  S_LOGIN* _this = reinterpret_cast< S_LOGIN* >(object);
  (void)_this;
}
void S_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LOGIN)
    MergeFrom(*source);
  }
}

void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void S_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S_OPEN_LEVEL::_Internal {
 public:
};

S_OPEN_LEVEL::S_OPEN_LEVEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OPEN_LEVEL)
}
S_OPEN_LEVEL::S_OPEN_LEVEL(const S_OPEN_LEVEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ilevelid_ = from.ilevelid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OPEN_LEVEL)
}

void S_OPEN_LEVEL::SharedCtor() {
ilevelid_ = uint64_t{0u};
}

S_OPEN_LEVEL::~S_OPEN_LEVEL() {
  // @@protoc_insertion_point(destructor:Protocol.S_OPEN_LEVEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_OPEN_LEVEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OPEN_LEVEL::ArenaDtor(void* object) {
  S_OPEN_LEVEL* _this = reinterpret_cast< S_OPEN_LEVEL* >(object);
  (void)_this;
}
void S_OPEN_LEVEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_OPEN_LEVEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_OPEN_LEVEL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OPEN_LEVEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ilevelid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OPEN_LEVEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iLevelID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ilevelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_OPEN_LEVEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OPEN_LEVEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iLevelID = 1;
  if (this->ilevelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ilevelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OPEN_LEVEL)
  return target;
}

size_t S_OPEN_LEVEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OPEN_LEVEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iLevelID = 1;
  if (this->ilevelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ilevelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_OPEN_LEVEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_OPEN_LEVEL)
  GOOGLE_DCHECK_NE(&from, this);
  const S_OPEN_LEVEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_OPEN_LEVEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_OPEN_LEVEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_OPEN_LEVEL)
    MergeFrom(*source);
  }
}

void S_OPEN_LEVEL::MergeFrom(const S_OPEN_LEVEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OPEN_LEVEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ilevelid() != 0) {
    _internal_set_ilevelid(from._internal_ilevelid());
  }
}

void S_OPEN_LEVEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_OPEN_LEVEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_OPEN_LEVEL::CopyFrom(const S_OPEN_LEVEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OPEN_LEVEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OPEN_LEVEL::IsInitialized() const {
  return true;
}

void S_OPEN_LEVEL::InternalSwap(S_OPEN_LEVEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ilevelid_, other->ilevelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OPEN_LEVEL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_LEVEL_STATE::_Internal {
 public:
};

S_LEVEL_STATE::S_LEVEL_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEVEL_STATE)
}
S_LEVEL_STATE::S_LEVEL_STATE(const S_LEVEL_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ilevelstate_ = from.ilevelstate_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEVEL_STATE)
}

void S_LEVEL_STATE::SharedCtor() {
ilevelstate_ = 0u;
}

S_LEVEL_STATE::~S_LEVEL_STATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_LEVEL_STATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LEVEL_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LEVEL_STATE::ArenaDtor(void* object) {
  S_LEVEL_STATE* _this = reinterpret_cast< S_LEVEL_STATE* >(object);
  (void)_this;
}
void S_LEVEL_STATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LEVEL_STATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LEVEL_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LEVEL_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ilevelstate_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEVEL_STATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 iLevelState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ilevelstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LEVEL_STATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LEVEL_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 iLevelState = 1;
  if (this->ilevelstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ilevelstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LEVEL_STATE)
  return target;
}

size_t S_LEVEL_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LEVEL_STATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 iLevelState = 1;
  if (this->ilevelstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilevelstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LEVEL_STATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LEVEL_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LEVEL_STATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LEVEL_STATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LEVEL_STATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LEVEL_STATE)
    MergeFrom(*source);
  }
}

void S_LEVEL_STATE::MergeFrom(const S_LEVEL_STATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LEVEL_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ilevelstate() != 0) {
    _internal_set_ilevelstate(from._internal_ilevelstate());
  }
}

void S_LEVEL_STATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LEVEL_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LEVEL_STATE::CopyFrom(const S_LEVEL_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LEVEL_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEVEL_STATE::IsInitialized() const {
  return true;
}

void S_LEVEL_STATE::InternalSwap(S_LEVEL_STATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ilevelstate_, other->ilevelstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEVEL_STATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_CREATE_OBJCECT::_Internal {
 public:
};

S_CREATE_OBJCECT::S_CREATE_OBJCECT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_OBJCECT)
}
S_CREATE_OBJCECT::S_CREATE_OBJCECT(const S_CREATE_OBJCECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strname().empty()) {
    strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bcontroll_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(bcontroll_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_OBJCECT)
}

void S_CREATE_OBJCECT::SharedCtor() {
strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bcontroll_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(bcontroll_));
}

S_CREATE_OBJCECT::~S_CREATE_OBJCECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATE_OBJCECT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CREATE_OBJCECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CREATE_OBJCECT::ArenaDtor(void* object) {
  S_CREATE_OBJCECT* _this = reinterpret_cast< S_CREATE_OBJCECT* >(object);
  (void)_this;
}
void S_CREATE_OBJCECT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CREATE_OBJCECT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CREATE_OBJCECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_OBJCECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strname_.ClearToEmpty();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bcontroll_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(bcontroll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_OBJCECT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iObjectType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iobjecttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iLayer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CREATE_OBJCECT.strName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bControll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bcontroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CREATE_OBJCECT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_OBJCECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // uint32 iObjectType = 2;
  if (this->iobjecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iobjecttype(), target);
  }

  // uint32 iLevel = 3;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ilevel(), target);
  }

  // uint32 iLayer = 4;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ilayer(), target);
  }

  // string strName = 5;
  if (!this->strname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CREATE_OBJCECT.strName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strname(), target);
  }

  // bool bControll = 6;
  if (this->bcontroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bcontroll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_OBJCECT)
  return target;
}

size_t S_CREATE_OBJCECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_OBJCECT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strName = 5;
  if (!this->strname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // uint32 iObjectType = 2;
  if (this->iobjecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iobjecttype());
  }

  // uint32 iLevel = 3;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilevel());
  }

  // uint32 iLayer = 4;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilayer());
  }

  // bool bControll = 6;
  if (this->bcontroll() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CREATE_OBJCECT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CREATE_OBJCECT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CREATE_OBJCECT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CREATE_OBJCECT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CREATE_OBJCECT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CREATE_OBJCECT)
    MergeFrom(*source);
  }
}

void S_CREATE_OBJCECT::MergeFrom(const S_CREATE_OBJCECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_OBJCECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.strname().empty()) {
    _internal_set_strname(from._internal_strname());
  }
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.iobjecttype() != 0) {
    _internal_set_iobjecttype(from._internal_iobjecttype());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.bcontroll() != 0) {
    _internal_set_bcontroll(from._internal_bcontroll());
  }
}

void S_CREATE_OBJCECT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CREATE_OBJCECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CREATE_OBJCECT::CopyFrom(const S_CREATE_OBJCECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_OBJCECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_OBJCECT::IsInitialized() const {
  return true;
}

void S_CREATE_OBJCECT::InternalSwap(S_CREATE_OBJCECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strname_, GetArenaForAllocation(),
      &other->strname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CREATE_OBJCECT, bcontroll_)
      + sizeof(S_CREATE_OBJCECT::bcontroll_)
      - PROTOBUF_FIELD_OFFSET(S_CREATE_OBJCECT, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_OBJCECT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_CHARACTER_NAME::_Internal {
 public:
};

S_CHARACTER_NAME::S_CHARACTER_NAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHARACTER_NAME)
}
S_CHARACTER_NAME::S_CHARACTER_NAME(const S_CHARACTER_NAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strname().empty()) {
    strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHARACTER_NAME)
}

void S_CHARACTER_NAME::SharedCtor() {
strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

S_CHARACTER_NAME::~S_CHARACTER_NAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHARACTER_NAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CHARACTER_NAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHARACTER_NAME::ArenaDtor(void* object) {
  S_CHARACTER_NAME* _this = reinterpret_cast< S_CHARACTER_NAME* >(object);
  (void)_this;
}
void S_CHARACTER_NAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHARACTER_NAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHARACTER_NAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHARACTER_NAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHARACTER_NAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHARACTER_NAME.strName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CHARACTER_NAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHARACTER_NAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strName = 1;
  if (!this->strname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHARACTER_NAME.strName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHARACTER_NAME)
  return target;
}

size_t S_CHARACTER_NAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHARACTER_NAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strName = 1;
  if (!this->strname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CHARACTER_NAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CHARACTER_NAME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CHARACTER_NAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CHARACTER_NAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CHARACTER_NAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CHARACTER_NAME)
    MergeFrom(*source);
  }
}

void S_CHARACTER_NAME::MergeFrom(const S_CHARACTER_NAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHARACTER_NAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.strname().empty()) {
    _internal_set_strname(from._internal_strname());
  }
}

void S_CHARACTER_NAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CHARACTER_NAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CHARACTER_NAME::CopyFrom(const S_CHARACTER_NAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHARACTER_NAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHARACTER_NAME::IsInitialized() const {
  return true;
}

void S_CHARACTER_NAME::InternalSwap(S_CHARACTER_NAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strname_, GetArenaForAllocation(),
      &other->strname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHARACTER_NAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_MATRIX::_Internal {
 public:
};

S_MATRIX::S_MATRIX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MATRIX)
}
S_MATRIX::S_MATRIX(const S_MATRIX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_(from.matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ilayer_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MATRIX)
}

void S_MATRIX::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ilayer_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
}

S_MATRIX::~S_MATRIX() {
  // @@protoc_insertion_point(destructor:Protocol.S_MATRIX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_MATRIX::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MATRIX::ArenaDtor(void* object) {
  S_MATRIX* _this = reinterpret_cast< S_MATRIX* >(object);
  (void)_this;
}
void S_MATRIX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MATRIX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MATRIX::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MATRIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ilayer_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MATRIX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float Matrix = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_MATRIX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MATRIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // repeated float Matrix = 4 [packed = true];
  if (this->_internal_matrix_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MATRIX)
  return target;
}

size_t S_MATRIX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MATRIX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float Matrix = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_MATRIX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_MATRIX)
  GOOGLE_DCHECK_NE(&from, this);
  const S_MATRIX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_MATRIX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_MATRIX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_MATRIX)
    MergeFrom(*source);
  }
}

void S_MATRIX::MergeFrom(const S_MATRIX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MATRIX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
}

void S_MATRIX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_MATRIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_MATRIX::CopyFrom(const S_MATRIX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MATRIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MATRIX::IsInitialized() const {
  return true;
}

void S_MATRIX::InternalSwap(S_MATRIX* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MATRIX, ilayer_)
      + sizeof(S_MATRIX::ilayer_)
      - PROTOBUF_FIELD_OFFSET(S_MATRIX, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MATRIX::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_ANIMATION::_Internal {
 public:
};

S_ANIMATION::S_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ANIMATION)
}
S_ANIMATION::S_ANIMATION(const S_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ichangeframe_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ichangeframe_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ANIMATION)
}

void S_ANIMATION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ichangeframe_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ichangeframe_));
}

S_ANIMATION::~S_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_ANIMATION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ANIMATION::ArenaDtor(void* object) {
  S_ANIMATION* _this = reinterpret_cast< S_ANIMATION* >(object);
  (void)_this;
}
void S_ANIMATION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ANIMATION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ANIMATION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ichangeframe_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(ichangeframe_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ANIMATION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iAnimIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ianimindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fChangeTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 iStartFrame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          istartframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iChangeFrame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ichangeframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ANIMATION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ANIMATION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // int32 iAnimIndex = 4;
  if (this->ianimindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ianimindex(), target);
  }

  // float fChangeTime = 5;
  if (!(this->fchangetime() <= 0 && this->fchangetime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fchangetime(), target);
  }

  // int32 iStartFrame = 6;
  if (this->istartframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_istartframe(), target);
  }

  // int32 iChangeFrame = 7;
  if (this->ichangeframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ichangeframe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ANIMATION)
  return target;
}

size_t S_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ANIMATION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iAnimIndex = 4;
  if (this->ianimindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ianimindex());
  }

  // float fChangeTime = 5;
  if (!(this->fchangetime() <= 0 && this->fchangetime() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 iStartFrame = 6;
  if (this->istartframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_istartframe());
  }

  // int32 iChangeFrame = 7;
  if (this->ichangeframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ichangeframe());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ANIMATION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ANIMATION)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ANIMATION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ANIMATION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ANIMATION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ANIMATION)
    MergeFrom(*source);
  }
}

void S_ANIMATION::MergeFrom(const S_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ANIMATION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.ianimindex() != 0) {
    _internal_set_ianimindex(from._internal_ianimindex());
  }
  if (!(from.fchangetime() <= 0 && from.fchangetime() >= 0)) {
    _internal_set_fchangetime(from._internal_fchangetime());
  }
  if (from.istartframe() != 0) {
    _internal_set_istartframe(from._internal_istartframe());
  }
  if (from.ichangeframe() != 0) {
    _internal_set_ichangeframe(from._internal_ichangeframe());
  }
}

void S_ANIMATION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ANIMATION::CopyFrom(const S_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ANIMATION::IsInitialized() const {
  return true;
}

void S_ANIMATION::InternalSwap(S_ANIMATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ANIMATION, ichangeframe_)
      + sizeof(S_ANIMATION::ichangeframe_)
      - PROTOBUF_FIELD_OFFSET(S_ANIMATION, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ANIMATION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::S_TIME* Arena::CreateMaybeMessage< ::Protocol::S_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN* Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OPEN_LEVEL* Arena::CreateMaybeMessage< ::Protocol::S_OPEN_LEVEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OPEN_LEVEL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEVEL_STATE* Arena::CreateMaybeMessage< ::Protocol::S_LEVEL_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEVEL_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATE_OBJCECT* Arena::CreateMaybeMessage< ::Protocol::S_CREATE_OBJCECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATE_OBJCECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHARACTER_NAME* Arena::CreateMaybeMessage< ::Protocol::S_CHARACTER_NAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHARACTER_NAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MATRIX* Arena::CreateMaybeMessage< ::Protocol::S_MATRIX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MATRIX >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ANIMATION* Arena::CreateMaybeMessage< ::Protocol::S_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ANIMATION >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
